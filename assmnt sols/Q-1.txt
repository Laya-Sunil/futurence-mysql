-- 1 -Top Earners

SELECT d.name as Department, e.name as Employee, e.salary as Salary
FROM Employee e INNER JOIN Department d 
ON e.departmentid = d.id
WHERE 3>(
        SELECT COUNT(distinct c.salary) FROM Employee c
        WHERE c.departmentid=e.departmentid 
        AND e.salary<c.salary
        )
ORDER BY d.name, e.name;



--- 2 Trips

SELECT Day, ROUND((Cancelled_requests/Total_requests),2)as Cancellation Rate
FROM
    (SELECT t.request_at as Day, count(*)Cancelled_requests 
    FROM Trips t INNER JOIN Users u 
    ON t.client_id=u.users_id OR t.client_id=u.driver_id
    AND u.banned = 'No' 
    WHERE t.status like 'cancelled%'
    GROUP BY t.request_at)a
INNER JOIN 
    (SELECT t.request_at as Day, count(*)as Total_requests
    FROM Trips t INNER JOIN Users u 
    ON t.client_id=u.users_id OR t.client_id=u.driver_id
    AND u.banned = 'No' 
    GROUP BY t.request_at)b
USING (Day)
where Day BETWEEN '2013-10-01' AND '2013-10-03'
ORDER BY Day;

-----------------------------------------------------------
SELECT Day, ROUND((Cancelled_requests/Total_requests),2)as `Cancellation Rate`
FROM
    (SELECT t.request_at as Day, sum(case 
                                    when t.status like 'cancelled%' then 1 
                                    else 0
                                 end) as Cancelled_requests 
    FROM Trips t INNER JOIN Users u 
    ON (t.client_id=u.users_id) 
    where t.client_id not in (select distinct users_id from Users where banned='Yes')
    and t.driver_id not in (select distinct users_id from Users where banned='Yes')
    GROUP BY t.request_at)a
INNER JOIN 
    (SELECT t.request_at as Day, count(*)as Total_requests
    FROM Trips t INNER JOIN Users u 
    ON (t.client_id=u.users_id) #OR t.driver_id=u.users_id)
    
    where t.client_id not in (select distinct users_id from Users where banned='Yes')
    and t.driver_id not in (select distinct users_id from Users where banned='Yes')
    GROUP BY t.request_at)b
USING (Day)
where Day BETWEEN '2013-10-01' AND '2013-10-03'
ORDER BY Day;

--- 3 - Logs

SELECT DISTINCT l1.num as ConsecutiveNums
FROM Logs l1 INNER JOIN Logs l2 INNER JOIN Logs l3
ON l1.num = l2.num AND l1.num = l3.num 
AND l2.id =l1.id+1 AND l3.id=l2.id+1;


-- 4- TREE 
SELECT id, CASE 
        		WHEN pid IS NULL THEN "Root"
        		WHEN id in (SELECT DISTINCT pid FROM Tree) THEN "Inner"
        		ELSE "Leaf"  
	     END as type
FROM Tree
ORDER BY id;


---5- STADIUM

SELECT s1.id, s1.visit_date, s1.people
FROM Stadium s1 INNER JOIN Stadium s2 INNER JOIN Stadium s3
ON s2.id = s1.id+1 and s3.id=s1.id+2
and s1.people>=100 and s2.people>=100
and s3.people>=100
ORDER BY s1.visit_date DESC;


----
with cte_std as (

SELECT s1.id id1, s1.visit_date vd1, s1.people sp1,
    s2.id id2, s2.visit_date vd2, s2.people sp2,
    s3.id id3, s3.visit_date vd3, s3.people sp3
FROM Stadium s1 INNER JOIN Stadium s2 INNER JOIN Stadium s3
ON s2.id = s1.id+1 and s3.id=s1.id+2
and s1.people>=100 and s2.people>=100
and s3.people>=100

)
SELECT id1 id, vd1 visit_date, sp1 people
FROM cte_std
UNION
SELECT id2, vd2, sp2
FROM cte_std
UNION
SELECT id3, vd3, sp3
FROM cte_std
ORDER BY visit_date DESC;
